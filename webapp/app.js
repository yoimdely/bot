
const tg = window.Telegram?.WebApp; if(tg){tg.ready();tg.expand();}

const storageKey='sexhealth.events.v3.1';
const pinKey='sexhealth.pin.v3.1';

const facts=[
  "–†–µ–≥—É–ª—è—Ä–Ω—ã–π —Å–æ–Ω —É–ª—É—á—à–∞–µ—Ç –≥–æ—Ä–º–æ–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∏ –ª–∏–±–∏–¥–æ.",
  "–°—Ç—Ä–µ—Å—Å –Ω–∞–ø—Ä—è–º—É—é –≤–ª–∏—è–µ—Ç –Ω–∞ —Å–µ–∫—Å—É–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ ‚Äî –Ω–∞–π–¥–∏ —Å–ø–æ—Å–æ–±—ã —Ä–∞—Å—Å–ª–∞–±–ª—è—Ç—å—Å—è.",
  "–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–≤—ã—à–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Ç–µ—Å—Ç–æ—Å—Ç–µ—Ä–æ–Ω–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ.",
  "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –≤–æ–¥–Ω—ã–π –±–∞–ª–∞–Ω—Å: —ç—Ç–æ –≤–ª–∏—è–µ—Ç –∏ –Ω–∞ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ, –∏ –Ω–∞ –ª–∏–±–∏–¥–æ.",
  "–ë–∞—Ä—å–µ—Ä–Ω–∞—è –∑–∞—â–∏—Ç–∞ —É–º–µ–Ω—å—à–∞–µ—Ç —Ä–∏—Å–∫ –ò–ü–ü–ü –∏ –ø–æ–≤—ã—à–∞–µ—Ç —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ.",
  "–ê–ª–∫–æ–≥–æ–ª—å –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ —Ä–∞—Å—Å–ª–∞–±–ª—è–µ—Ç, –Ω–æ —Å–Ω–∏–∂–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —ç—Ä–µ–∫—Ü–∏–∏/–≤–æ–∑–±—É–∂–¥–µ–Ω–∏—è.",
  "–°—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä–µ–∂–∏–º —Å–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –¥–æ—Ñ–∞–º–∏–Ω–∞ –∏ —Ç–µ—Å—Ç–æ—Å—Ç–µ—Ä–æ–Ω–∞.",
  "–î—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –ø–æ–º–æ–≥–∞—é—Ç —É–º–µ–Ω—å—à–∏—Ç—å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥ –±–ª–∏–∑–æ—Å—Ç—å—é.",
  "–ù–∞—Å—ã—â–µ–Ω–Ω—ã–µ –∂–∏—Ä—ã –≤ –∏–∑–±—ã—Ç–∫–µ —É—Ö—É–¥—à–∞—é—Ç –∫—Ä–æ–≤–æ—Ç–æ–∫ ‚Äî —Å–ª–µ–¥–∏ –∑–∞ –ø–∏—Ç–∞–Ω–∏–µ–º.",
  "–£–º–µ—Ä–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —É–ª—É—á—à–∞—é—Ç —Å–æ—Å—É–¥–∏—Å—Ç–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ –∏ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å."
];

// elements
const form=document.getElementById('eventForm');
const historyEl=document.getElementById('history');
const kpisEl=document.getElementById('kpis');
const filterCat=document.getElementById('filterCat');
const clearBtn=document.getElementById('clearBtn');
const exportCsv=document.getElementById('exportCsv');
const exportPdf=document.getElementById('exportPdf');
const infoBtn=document.getElementById('infoBtn');
const infoModal=document.getElementById('infoModal');
const closeInfo=document.getElementById('closeInfo');
const factBox=document.getElementById('factBox');
const lockBtn=document.getElementById('lockBtn');
const pinModal=document.getElementById('pinModal'); const pinInput=document.getElementById('pinInput');
const pinSetBtn=document.getElementById('pinSet'); const pinCheckBtn=document.getElementById('pinCheck');

let chart;

// storage helpers
const load=()=>{ try{return JSON.parse(localStorage.getItem(storageKey)||'[]')}catch{return []} };
const save=(l)=> localStorage.setItem(storageKey, JSON.stringify(l));

// pin
const hasPin=()=>!!localStorage.getItem(pinKey);
const setPin=(v)=>localStorage.setItem(pinKey,v);
const checkPin=(v)=>localStorage.getItem(pinKey)===v;

// info & pin handlers
infoBtn.addEventListener('click',()=>infoModal.showModal());
closeInfo.addEventListener('click',()=>infoModal.close());

lockBtn.addEventListener('click',()=>{pinInput.value='';pinModal.showModal()});
pinSetBtn.addEventListener('click',e=>{e.preventDefault();const v=pinInput.value.trim();if(!v)return;setPin(v);pinModal.close();alert('PIN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')});
pinCheckBtn.addEventListener('click',e=>{e.preventDefault();if(hasPin()&&!checkPin(pinInput.value.trim()))return alert('–ù–µ–≤–µ—Ä–Ω—ã–π PIN');pinModal.close()});

// facts
function renderFact(){ factBox.textContent = facts[Math.floor(Math.random()*facts.length)]; }

// filtering
function applyFilter(list){ const cat=filterCat.value; return cat==='all'?list:list.filter(x=>x.category===cat); }
filterCat.addEventListener('change',()=>renderAll());

// KPIs
function renderKPIs(list){
  const now=Date.now(), week=7*24*3600*1000;
  const f=applyFilter(list).filter(x=> now-x.ts<=week);
  const total=f.length;
  const prot=f.length?Math.round(100*f.filter(x=>x.protected).length/f.length):0;
  const orgasm=f.length?Math.round(100*f.filter(x=>x.orgasm).length/f.length):0;
  kpisEl.innerHTML=`
    <div class="kpi"><div class="num">${total}</div><div class="lbl">–∑–∞ 7 –¥–Ω–µ–π</div></div>
    <div class="kpi"><div class="num">${prot}%</div><div class="lbl">–∑–∞—â–∏—Ç–∞</div></div>
    <div class="kpi"><div class="num">${orgasm}%</div><div class="lbl">–æ—Ä–≥–∞–∑–º</div></div>
  `;
}

// chart
function buildChartData(list){
  const days=[];
  for(let i=6;i>=0;i--){
    const d=new Date(); d.setHours(0,0,0,0); d.setDate(d.getDate()-i);
    days.push({label:d.toLocaleDateString(), start:d.getTime(), end:d.getTime()+86400000});
  }
  const f=applyFilter(list);
  return { labels: days.map(d=>d.label), counts: days.map(d=>f.filter(x=>x.ts>=d.start && x.ts<d.end).length) };
}
function renderChart(list){
  const {labels,counts}=buildChartData(list);
  const ctx=document.getElementById('chart');
  if(chart) chart.destroy();
  chart=new Chart(ctx,{
    type:'line',
    data:{ labels, datasets:[{ label:'–°–æ–±—ã—Ç–∏—è', data:counts, borderColor:'#e53935', backgroundColor:'rgba(229,57,53,.15)', fill:true, tension:.35 }]},
    options:{
      responsive:true,
      plugins:{ legend:{ display:false } },
      scales:{ x:{ grid:{ display:false } }, y:{ beginAtZero:true, ticks:{ precision:0 } } }
    }
  });
}

// history
function renderHistory(list){
  const data=applyFilter(list).sort((a,b)=>b.ts-a.ts);
  historyEl.innerHTML = data.map(e=>{
    const d=new Date(e.ts).toLocaleString();
    const safe=(s)=> (s||'').replace(/</g,'&lt;');
    const catLabel={sex:'–°–µ–∫—Å',masturbation:'–ú–∞—Å—Ç—É—Ä–±–∞—Ü–∏—è',date:'–°–≤–∏–¥–∞–Ω–∏–µ',foreplay:'–ü—Ä–µ–ª—é–¥–∏—è',other:'–î—Ä—É–≥–æ–µ'}[e.category]||e.category;
    return `<div class="hist">
      <div><b>${d}</b><div class="note">${safe(e.note)}</div></div>
      <div>${catLabel} ‚Ä¢ ${safe(e.mood)} ${e.protected?'‚Ä¢ üõ°Ô∏è':''} ${e.orgasm?'‚Ä¢ ‚ú®':''} ${e.partner? '‚Ä¢ '+safe(e.partner):''}</div>
    </div>`;
  }).join('') || '<div class="muted">–ü–æ–∫–∞ –ø—É—Å—Ç–æ</div>';
}

// form submit
form.addEventListener('submit', (ev)=>{
  ev.preventDefault();
  const dt=document.getElementById('dt').value;
  if(!dt) return alert('–£–∫–∞–∂–∏ –¥–∞—Ç—É/–≤—Ä–µ–º—è');
  const payload={
    ts:new Date(dt).getTime(),
    category:document.getElementById('category').value,
    partner:document.getElementById('partner').value.trim(),
    mood:document.getElementById('mood').value,
    protected:document.getElementById('protected').checked,
    orgasm:document.getElementById('orgasm').checked,
    note:document.getElementById('note').value.trim()
  };
  const list=load(); list.push(payload); save(list);
  try{ tg?.sendData?.(JSON.stringify({ type:'event_add', payload })); }catch{}
  form.reset(); renderAll(); tg?.HapticFeedback?.notificationOccurred?.('success');
});

// clear
clearBtn.addEventListener('click', ()=>{
  if(!confirm('–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏?')) return;
  localStorage.removeItem(storageKey);
  renderAll();
});

// export
function toCSV(list){
  const header=['datetime','category','partner','mood','protected','orgasm','note'];
  const rows=list.map(e=>[
    new Date(e.ts).toISOString(),
    e.category,
    (e.partner||'').replace(/"/g,'""'),
    e.mood,
    e.protected?'yes':'no',
    e.orgasm?'yes':'no',
    (e.note||'').replace(/"/g,'""')
  ]);
  return [header,...rows].map(r=>r.map(c=>`"${c}"`).join(',')).join('\n');
}
exportCsv.addEventListener('click', ()=>{
  const csv=toCSV(load());
  const blob=new Blob([csv],{type:'text/csv;charset=utf-8;'});
  const url=URL.createObjectURL(blob);
  const a=document.createElement('a'); a.href=url; a.download='sexhealth_export.csv';
  document.body.appendChild(a); a.click(); a.remove(); URL.revokeObjectURL(url);
});
exportPdf.addEventListener('click', ()=>{
  const list=applyFilter(load());
  const { jsPDF } = window.jspdf; const doc=new jsPDF();
  doc.setFontSize(16); doc.text('Sex Health ‚Äî –û—Ç—á—ë—Ç', 14, 18);
  doc.setFontSize(10); doc.text('–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: '+new Date().toLocaleString(), 14, 26);
  let y=36;
  list.slice(0,80).forEach(e=>{
    const line=`${new Date(e.ts).toLocaleString()} | ${e.category} | ${e.mood} ${e.protected?'‚Ä¢ shield':''} ${e.orgasm?'‚Ä¢ orgasm':''} ${e.partner? '‚Ä¢ '+e.partner:''} ${e.note? '‚Äî '+e.note:''}`;
    if(y>280){ doc.addPage(); y=20; }
    doc.text(line, 14, y); y+=6;
  });
  doc.save('sexhealth_report.pdf');
});

function renderAll(){
  const list=load();
  renderKPIs(list);
  renderChart(list);
  renderHistory(list);
  renderFact();
}

// init
renderAll();
